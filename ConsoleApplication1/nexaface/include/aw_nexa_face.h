/**********************************************************************
 *
 * Copyright (C) 2023 Aware, Inc.
 *
 * $Workfile:  $    $Revision:  $
 * Last Modified: $Date: $ by: $Author:  $
 *
 **********************************************************************/

/* DO NOT EDIT THIS FILE. IT IS AUTO-GENERATED */

#ifndef _AW_NEXA_FACE_H_
#define _AW_NEXA_FACE_H_

#include "aw_types.h"

#if defined(_WIN32)
# include <windows.h>
# ifndef AW_NEXA_FACE_DECLARE
#   if !defined(AW_NEXA_FACE_STATIC_LIBRARY)
#     define AW_NEXA_FACE_DECLARE(rtn) __declspec(dllimport) rtn WINAPI
#   else 
#     define AW_NEXA_FACE_DECLARE(rtn) rtn
#   endif 
# endif
#else /* !_WIN32 */
# ifndef AW_NEXA_FACE_DECLARE
#   define AW_NEXA_FACE_DECLARE(rtn) rtn
# endif
#define HWND int
#define WINAPI 
#endif /* !_WIN32 */



#ifdef __cplusplus
extern "C" {
#endif

typedef struct aw_nexa_face_t aw_nexa_face_t;

/* Type of face. */
enum aw_nexa_face_face_type_t
{
    /* Frontal face image captured in visible light. */
    AW_NEXA_FACE_FACE_TYPE_VISIBLE_FRONTAL=0
};
typedef enum aw_nexa_face_face_type_t aw_nexa_face_face_type_t;

/* Algorithm for comparing faces. */
enum aw_nexa_face_algorithm_t
{
    /* Algorithm F200. */
    AW_NEXA_FACE_ALGORITHM_F200=1020200,

    /* Algorithm F500. */
    AW_NEXA_FACE_ALGORITHM_F500=1020300
};
typedef enum aw_nexa_face_algorithm_t aw_nexa_face_algorithm_t;

/* How a cache handles algorithm data. */
enum aw_nexa_face_cache_type_t
{
    /* The cache loads the data into RAM on initialize for faster access.
       Every cache change is synced to disk. */
    AW_NEXA_FACE_CACHE_TYPE_RAM=1,

    /* The dataset is read from disk on demand for lower RAM usage. */
    AW_NEXA_FACE_CACHE_TYPE_DISK=2
};
typedef enum aw_nexa_face_cache_type_t aw_nexa_face_cache_type_t;

/* Log level. Higher levels include the previous ones. */
enum aw_nexa_face_log_level_t
{
    /* No logging. */
    AW_NEXA_FACE_LOG_LEVEL_NONE=1,

    /* Log fatal errors. */
    AW_NEXA_FACE_LOG_LEVEL_FATAL=2,

    /* Log all errors. */
    AW_NEXA_FACE_LOG_LEVEL_ERROR=3,

    /* Log all warnings. */
    AW_NEXA_FACE_LOG_LEVEL_WARNING=4,

    /* Log all informative statementes. */
    AW_NEXA_FACE_LOG_LEVEL_INFO=5,

    /* Log all debug statements. */
    AW_NEXA_FACE_LOG_LEVEL_DEBUG=6,

    /* Trace logging. */
    AW_NEXA_FACE_LOG_LEVEL_TRACE=7
};
typedef enum aw_nexa_face_log_level_t aw_nexa_face_log_level_t;

struct aw_nexa_face_cache_config_t;
typedef struct aw_nexa_face_cache_config_t aw_nexa_face_cache_config_t;

struct aw_nexa_face_workflow_t;
typedef struct aw_nexa_face_workflow_t aw_nexa_face_workflow_t;

struct aw_nexa_face_encounter_t;
typedef struct aw_nexa_face_encounter_t aw_nexa_face_encounter_t;

struct aw_nexa_face_candidate_list_t;
typedef struct aw_nexa_face_candidate_list_t aw_nexa_face_candidate_list_t;

struct aw_nexa_face_compare_result_t;
typedef struct aw_nexa_face_compare_result_t aw_nexa_face_compare_result_t;

struct aw_nexa_face_identify_result_t;
typedef struct aw_nexa_face_identify_result_t aw_nexa_face_identify_result_t;

struct aw_nexa_face_cache_add_batch_t;
typedef struct aw_nexa_face_cache_add_batch_t aw_nexa_face_cache_add_batch_t;

/* <Function> aw_nexa_face_export_callback
   <Description> Callback used to report when a buffer has been generated.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code returned by the cache.
     nexa_template - A buffer with the encounter's representation.
     nexa_template_size - Size of A buffer with the encounter's
                          representation.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_export_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  aw_uint8_t* nexa_template,
  size_t nexa_template_size,
  void* private_data
);

/* <Function> aw_nexa_face_export_algorithm_template_callback
   <Description> Callback used to report when individual algorithm templates
   have been generated. Note that these templates cannot be
   imported back into Nexa|Face.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code returned by the cache.
     face_type - Face type.
     algorithm - Algorithm used to generate the template.
     algorithm_template - A buffer with the individual algorithm's template
                          data.
     algorithm_template_size - Size of A buffer with the individual
                               algorithm's template data.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_export_algorithm_template_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  aw_nexa_face_face_type_t face_type,
  aw_nexa_face_algorithm_t algorithm,
  aw_uint8_t* algorithm_template,
  size_t algorithm_template_size,
  void* private_data
);

/* <Function> aw_nexa_face_cache_batch_result_callback
   <Description> Callback used to notify when a batch cache operation has
   completed.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code returned by the cache.
     id_list - Encounter ID list.
     id_list_size - Size of Encounter ID list.
     cache_name - Name of the cache that the batch will be added to.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_cache_batch_result_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  const aw_char_t** id_list,
  size_t id_list_size,
  const aw_char_t* cache_name,
  void* private_data
);

/* <Function> aw_nexa_face_cache_result_callback
   <Description> Callback used to notify when a cache operation has completed.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code returned by the cache.
     encounter_id - Encounter ID.
     cache_name - Name of the cache.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_cache_result_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  const aw_char_t* encounter_id,
  const aw_char_t* cache_name,
  void* private_data
);

/* <Function> aw_nexa_face_compare_result_callback
   <Description> Callback used to notify when a compare operation has
   completed.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code for the job.
     compare_result - Compare result.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_compare_result_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  aw_nexa_face_compare_result_t* compare_result,
  void* private_data
);

/* <Function> aw_nexa_face_verify_result_callback
   <Description> Callback used to notify when a verify operation has
   completed.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code for the job.
     compare_result - Compare result.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_verify_result_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  aw_nexa_face_compare_result_t* compare_result,
  void* private_data
);

/* <Function> aw_nexa_face_identify_progress_callback
   <Description> Callback used to notify of an identify operation progress.
   <Parameters>
     job_id - ID of the job.
     progress - Progress on the job.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_identify_progress_callback_t(
  const aw_char_t* job_id,
  aw_float_t progress,
  void* private_data
);

/* <Function> aw_nexa_face_identify_error_callback
   <Description> Callback used to notify of an error during an identify
   operation. Called once for each error encountered during the
   operation.
   <Parameters>
     job_id - ID of the job.
     error_code - Error code for this record.
     encounter_id - If error relates to a specific entry in the cache, the ID
                    of the entry is provided. Otherwise, -1.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_identify_error_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  const aw_char_t* encounter_id,
  void* private_data
);

/* <Function> aw_nexa_face_identify_result_callback
   <Description> Callback used to notify when an identify operation has
   completed.
   <Parameters>
     job_id - ID that identifies the job.
     error_code - Error code for the job.
     results - List of compare results.
     private_data - Private data used to determine callback context.
   <Return Value>
     None
    */
typedef void WINAPI aw_nexa_face_identify_result_callback_t(
  const aw_char_t* job_id,
  aw_int32_t error_code,
  aw_nexa_face_candidate_list_t* results,
  void* private_data
);

/* Library Management */

/* <Function> aw_nexa_face_create
   <Description> This function creates the NexaFace object.
   <Parameters>
     nexa_face - Pointer to an NexaFace object, null if the object could not
                 be allocated.
   <Return Value>
     Pointer to an NexaFace object, null if the object could not be allocated.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_create(
  aw_nexa_face_t** nexa_face
);

/* <Function> aw_nexa_face_destroy
   <Description> This function destroys the NexaFace object.
   <Parameters>
     aw_nexa_face - Library object pointer.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(void) aw_nexa_face_destroy(
  aw_nexa_face_t* aw_nexa_face
);

/* <Function> aw_nexa_face_free
   <Description> This function frees memory allocated by Nexa|Face.
   <Parameters>
     ptr - Pointer.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(void) aw_nexa_face_free(
  void* ptr
);

/* Cache Configuration */

/* <Function> aw_nexa_face_create_cache_config
   <Description> Creates a cache configuration object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     name - Name of the cache config.
     cache_config - Cache Configuration.
   <Return Value>
     Cache Configuration.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_create_cache_config(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* name,
  aw_nexa_face_cache_config_t** cache_config
);


/* <Function> aw_nexa_face_cache_config_set_dir
   <Description> Sets the directory containing this cache.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_config - Cache Configuration.
     path - Path to the cache directory.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_config_set_dir(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_config_t* cache_config,
  const aw_char_t* path
);

/* <Function> aw_nexa_face_cache_config_set_max_encounters
   <Description> Sets the maximum number of encounters that can be enrolled
   into the cache. The maximum value is 10,000,000.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_config - Cache Configuration.
     max_encounters - Maximum number of encounters.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_config_set_max_encounters(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_config_t* cache_config,
  aw_int32_t max_encounters
);

/* <Function> aw_nexa_face_cache_config_add_algorithm
   <Description> Enables the use of a face comparing algorithm within this
   cache. This function should be called once for each algorithm
   that is to be supported. The list of supported algorithms
   cannot be changed once the cache is created.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_config - Cache Configuration.
     algorithm - Face compare algorithm.
     cache_type - How the cache accesses this algorithm's data.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_config_add_algorithm(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_config_t* cache_config,
  aw_nexa_face_algorithm_t algorithm,
  aw_nexa_face_cache_type_t cache_type
);

/* <Function> aw_nexa_face_cache_config_enable_face
   <Description> Enables the use of the face type. This must be set for each
   face type that will be used. The list of supported face types
   cannot be changed once the cache is created.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_config - Cache Configuration.
     face - Face type.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_config_enable_face(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_config_t* cache_config,
  aw_nexa_face_face_type_t face
);

/* <Function> aw_nexa_face_cache_config_destroy
   <Description> This function destroys the cache_config object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_config - Cache Configuration.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_config_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_config_t* cache_config
);

/* Configuration */

/* <Function> aw_nexa_face_enable_algorithm
   <Description> Enables the use of a face comparing algorithm. This function
   should be called once for each algorithm that is to be
   supported. This function must be called before
   aw_nexa_face_cache_config_add_algorithm.
   <Parameters>
     aw_nexa_face - Library object pointer.
     algorithm - Face compare algorithm.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_enable_algorithm(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_algorithm_t algorithm
);

/* <Function> aw_nexa_face_set_worker_count
   <Description> Sets the number of workers that will be used. 0 indicates
   that the number will be equal to the number of cores reported
   by the OS. The default value is 0.
   <Parameters>
     aw_nexa_face - Library object pointer.
     worker_count - Number of workers.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_worker_count(
  aw_nexa_face_t* aw_nexa_face,
  aw_int32_t worker_count
);

/* <Function> aw_nexa_face_set_optimization_model
   <Description> [deprecatged.Please use set_algorithm_optimization_model
   instead] Optimize face matching to a particular model file.
   <Parameters>
     aw_nexa_face - Library object pointer.
     file_path - Path to the optimization model file.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_optimization_model(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* file_path
);

/* <Function> aw_nexa_face_set_algorithm_optimization_model
   <Description> Optimize face matching to a particular model file.
   <Parameters>
     aw_nexa_face - Library object pointer.
     algorithm - Face compare algorithm.
     file_path - Path to the optimization model file.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_algorithm_optimization_model(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_algorithm_t algorithm,
  const aw_char_t* file_path
);

/* <Function> aw_nexa_face_add_cache
   <Description> Adds a cache to be used.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_config - Cache configuration.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_add_cache(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_config_t* cache_config
);

/* <Function> aw_nexa_face_initialize
   <Description> Initializes the library. All configuration options must be
   set before calling this function. All cache and operation
   functions must be called after calling this function.
   <Parameters>
     aw_nexa_face - Library object pointer.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_initialize(
  aw_nexa_face_t* aw_nexa_face
);

/* Workflow */

/* <Function> aw_nexa_face_create_workflow
   <Description> Holder for a workflow of algorithms.
   <Parameters>
     aw_nexa_face - Library object pointer.
     workflow - Workflow.
   <Return Value>
     Workflow.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_create_workflow(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_workflow_t** workflow
);

/* <Function> aw_nexa_face_workflow_add_filter_percentage
   <Description> Add a filter algorithm to a workflow that reduces the number
   of candidates to the percentage, or the minimum (whichever is
   larger). For example, an input value of 0.10 will take the
   top 10%. For filters after the first, the list of faces must
   not include any faces not already used.
   <Parameters>
     aw_nexa_face - Library object pointer.
     workflow - Workflow.
     algorithm - Face compare algorithm.
     faces - Face types that will be used with this filter.
     faces_size - Size of Face types that will be used with this filter.
     percent - The percentage, expressed as a float in the range [0.0, 1.0] .
     minimum - The minimum number of results.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_workflow_add_filter_percentage(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_workflow_t* workflow,
  aw_nexa_face_algorithm_t algorithm,
  aw_nexa_face_face_type_t* faces,
  size_t faces_size,
  aw_float_t percent,
  aw_int32_t minimum
);

/* <Function> aw_nexa_face_workflow_add_filter_fixed
   <Description> Add a filter algorithm to a workflow to refine to a fixed
   number of results. For example, an input value of 3000 will
   filter out the top 3,000 results.
   <Parameters>
     aw_nexa_face - Library object pointer.
     workflow - Workflow.
     algorithm - Face compare algorithm.
     faces - Face types that will be used with this filter.
     faces_size - Size of Face types that will be used with this filter.
     fixed_num - The fixed number of results, expressed as a positive integer.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_workflow_add_filter_fixed(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_workflow_t* workflow,
  aw_nexa_face_algorithm_t algorithm,
  aw_nexa_face_face_type_t* faces,
  size_t faces_size,
  aw_int32_t fixed_num
);

/* <Function> aw_nexa_face_workflow_set_comparator
   <Description> Sets the comparator that is used for calculating the final
   scores in a compare, verify, or identify operation.
   <Parameters>
     aw_nexa_face - Library object pointer.
     workflow - Workflow.
     algorithm - Face compare algorithm.
     faces - Face types that will be used with this filter.
     faces_size - Size of Face types that will be used with this filter.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_workflow_set_comparator(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_workflow_t* workflow,
  aw_nexa_face_algorithm_t algorithm,
  aw_nexa_face_face_type_t* faces,
  size_t faces_size
);

/* <Function> aw_nexa_face_workflow_destroy
   <Description> This function destroys the workflow object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     workflow - Workflow.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_workflow_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_workflow_t* workflow
);

/* Encounter */

/* <Function> aw_nexa_face_create_encounter
   <Description> Creates an encounter object that can be used for various
   operations.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
   <Return Value>
     Encounter.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_create_encounter(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t** encounter
);

/* <Function> aw_nexa_face_encounter_set_image
   <Description> Sets the image that will be used for the encounter for the
   face type. Each encounter can have one image per face type.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
     face_type - Type of face.
     face_image - Formatted image containing a face image. Supported image
                  formats are: BMP, PNG, JPG.
     face_image_size - Size of Formatted image containing a face image.
                       Supported image formats are: BMP, PNG, JPG.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_encounter_set_image(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t* encounter,
  aw_nexa_face_face_type_t face_type,
  aw_uint8_t* face_image,
  size_t face_image_size
);

/* <Function> aw_nexa_face_encounter_remove_face
   <Description> Marks the face type image as removed from the encounter's
   entry. This will remove the stored image from the cache, if
   one is present.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
     face_type - Type of face.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_encounter_remove_face(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t* encounter,
  aw_nexa_face_face_type_t face_type
);

/* <Function> aw_nexa_face_encounter_set_id
   <Description> Sets the ID that will be used for this encounter.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
     encounter_id - Unique encounter ID.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_encounter_set_id(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t* encounter,
  const aw_char_t* encounter_id
);

/* <Function> aw_nexa_face_encounter_export_to_template
   <Description> Generates the template for the encounter, triggering an
   Export Callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
     job_id - ID that identifies the job.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_encounter_export_to_template(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t* encounter,
  const aw_char_t* job_id
);

/* <Function> aw_nexa_face_encounter_import_from_template
   <Description> Sets the representation of this encounter.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
     nexa_template - Nexa|Face template buffer.
     nexa_template_size - Size of Nexa|Face template buffer.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_encounter_import_from_template(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t* encounter,
  aw_uint8_t* nexa_template,
  size_t nexa_template_size
);

/* <Function> aw_nexa_face_encounter_destroy
   <Description> This function destroys the encounter object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     encounter - Encounter.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_encounter_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_encounter_t* encounter
);

/* <Function> aw_nexa_face_set_export_callback
   <Description> Sets the export_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     export_callback - Callback used to report when a buffer has been
                       generated.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_export_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_export_callback_t* export_callback,
  void* private_data
);

/* <Function> aw_nexa_face_set_export_algorithm_template_callback
   <Description> Sets the export_algorithm_template_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     export_algorithm_template_callback - Callback used to report when
                                          individual algorithm templates have
                                          been generated. Note that these
                                          templates cannot be imported back
                                          into Nexa|Face.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_export_algorithm_template_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_export_algorithm_template_callback_t* export_algorithm_template_callback,
  void* private_data
);

/* Candidate List */


/* <Function> aw_nexa_face_candidate_list_results
   <Description> Retrieves candidate list results. The returned pointer must
   be passed to aw_nexa_face_free to free the array memory. Each
   entry in the array must be passed to identify_result_destroy.
   <Parameters>
     aw_nexa_face - Library object pointer.
     candidate_list - Candidate list.
     max_encounters - Maximum number of encounters to return.
     results - Candidate list results.
     results_size - Size of Candidate list results.
   <Return Value>
     Candidate list results.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_candidate_list_results(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_candidate_list_t* candidate_list,
  aw_int32_t max_encounters,
  aw_nexa_face_identify_result_t*** results,
  size_t* results_size
);

/* <Function> aw_nexa_face_candidate_list_destroy
   <Description> This function destroys the candidate_list object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     candidate_list - Candidate list.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_candidate_list_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_candidate_list_t* candidate_list
);

/* CompareResult */


/* <Function> aw_nexa_face_compare_result_get_score
   <Description> Retrieves the score in inverse log FMR units.
   <Parameters>
     aw_nexa_face - Library object pointer.
     compare_result - Compare result.
     score - Score.
   <Return Value>
     Score.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_compare_result_get_score(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_compare_result_t* compare_result,
  aw_float_t* score
);

/* <Function> aw_nexa_face_compare_result_destroy
   <Description> This function destroys the compare result object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     compare_result - Compare result.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_compare_result_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_compare_result_t* compare_result
);

/* IdentifyResult */


/* <Function> aw_nexa_face_identify_result_get_encounter_id
   <Description> Retrieves the ID for the identify result. The returned string
   must be passed to aw_nexa_face_free to free the returned
   memory.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_result - Identify result.
     encounter_id - Encounter ID.
   <Return Value>
     Encounter ID.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_identify_result_get_encounter_id(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_result_t* identify_result,
  const aw_char_t** encounter_id
);

/* <Function> aw_nexa_face_identify_result_get_score
   <Description> Retrieves the score in inverse log FPIR units.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_result - Identify result.
     score - Score.
   <Return Value>
     Score.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_identify_result_get_score(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_result_t* identify_result,
  aw_float_t* score
);

/* <Function> aw_nexa_face_identify_result_get_score_fmr
   <Description> Retrieves the score in inverse log FMR units.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_result - Identify result.
     score - Score.
   <Return Value>
     Score.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_identify_result_get_score_fmr(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_result_t* identify_result,
  aw_float_t* score
);

/* <Function> aw_nexa_face_identify_result_destroy
   <Description> This function destroys the identify result object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_result - Identify result.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_identify_result_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_result_t* identify_result
);

/* Batching */

/* <Function> aw_nexa_face_create_cache_add_batch
   <Description> Creates a batch object for performing multiple cache_add
   operations.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_name - Name of the cache that the batch will be added to.
     cache_add_batch - Cache add batch.
   <Return Value>
     Cache add batch.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_create_cache_add_batch(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* cache_name,
  aw_nexa_face_cache_add_batch_t** cache_add_batch
);


/* <Function> aw_nexa_face_cache_add_batch_add_template
   <Description> Adds an exported buffer to the batch.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_add_batch - Cache add batch.
     nexa_template - Exported Nexa|Face template.
     nexa_template_size - Size of Exported Nexa|Face template.
     id - ID to be associated with the template.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_add_batch_add_template(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_add_batch_t* cache_add_batch,
  aw_uint8_t* nexa_template,
  size_t nexa_template_size,
  const aw_char_t* id
);

/* <Function> aw_nexa_face_cache_add_batch_run
   <Description> Runs the batch job.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_add_batch - Cache add batch.
     job_id - ID that identifies the job.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_add_batch_run(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_add_batch_t* cache_add_batch,
  const aw_char_t* job_id
);

/* <Function> aw_nexa_face_cache_add_batch_destroy
   <Description> This function destroys the cache_add_batch object.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_add_batch - Cache add batch.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_add_batch_destroy(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_add_batch_t* cache_add_batch
);

/* <Function> aw_nexa_face_set_cache_batch_result_callback
   <Description> Sets the cache_batch_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_batch_result_callback - Callback used to notify when a batch cache
                                   operation has completed.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_cache_batch_result_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_batch_result_callback_t* cache_batch_result_callback,
  void* private_data
);

/* Cache Operations */

/* <Function> aw_nexa_face_cache_add
   <Description> Enrolls the encounter into the cache using the encounter
   data. Result is reported using the cache_result callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     encounter - Encounter.
     cache_name - Name of the cache.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_add(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  aw_nexa_face_encounter_t* encounter,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_cache_update
   <Description> Merges the encounter data with the data present in the cache.
   Result is reported using the cache_result callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     encounter - Encounter.
     encounter_id - Encounter ID.
     cache_name - Name of the cache.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_update(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  aw_nexa_face_encounter_t* encounter,
  const aw_char_t* encounter_id,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_cache_delete
   <Description> Deletes an encounter from the cache. Result is reported using
   the cache_result callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     encounter_id - Encounter ID.
     cache_name - Name of the cache.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_delete(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  const aw_char_t* encounter_id,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_cache_drop
   <Description> Drops the entire cache. Result is reported using the
   cache_result callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     cache_name - Name of the cache.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_drop(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_cache_get_max_encounters
   <Description> Gets the maximum number of encounters allowed for the current
   cache.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_name - Name of the cache.
     cache_max_encounters - Maximum number of encounters.
   <Return Value>
     Maximum number of encounters.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_get_max_encounters(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* cache_name,
  aw_int32_t* cache_max_encounters
);

/* <Function> aw_nexa_face_cache_get_current_encounter_count
   <Description> Gets the number of enrolled encounters in the current cache.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_name - Name of the cache.
     encounter_count - Encounter count.
   <Return Value>
     Encounter count.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_get_current_encounter_count(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* cache_name,
  aw_int32_t* encounter_count
);

/* <Function> aw_nexa_face_cache_get_encounter_list
   <Description> Returns the list of encounter IDs enrolled in the cache. The
   returned array pointer must be passed to aw_nexa_face_free to
   free the returned memory, as well as each string pointer in
   the array.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_name - Name of the cache.
     encounter_list - Encounter list.
     encounter_list_size - Size of Encounter list.
   <Return Value>
     Encounter list.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_cache_get_encounter_list(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* cache_name,
  const aw_char_t*** encounter_list,
  size_t* encounter_list_size
);

/* <Function> aw_nexa_face_set_cache_result_callback
   <Description> Sets the cache_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     cache_result_callback - Callback used to notify when a cache operation
                             has completed.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_cache_result_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_cache_result_callback_t* cache_result_callback,
  void* private_data
);

/* Operations */

/* <Function> aw_nexa_face_compare
   <Description> Peforms a single compare using two encounters. Result is
   reported using the compare_result callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     probe - Encounter handle containing the probe.
     gallery - Encounter handle containing the gallery.
     workflow - Workflow for the compare operation. Must contain a comparator
                and no filters.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_compare(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  aw_nexa_face_encounter_t* probe,
  aw_nexa_face_encounter_t* gallery,
  aw_nexa_face_workflow_t* workflow
);

/* <Function> aw_nexa_face_set_compare_result_callback
   <Description> Sets the compare_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     compare_result_callback - Callback used to notify when a compare
                               operation has completed.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_compare_result_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_compare_result_callback_t* compare_result_callback,
  void* private_data
);

/* <Function> aw_nexa_face_verify
   <Description> Peforms a verify operation comparing an encounter handle with
   an enrolled encounter. Result is reported using the
   verify_result callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     probe - Encounter handle containing the probe.
     encounter_id - Encounter ID to perform the verify operation against.
     workflow - Workflow for the verify operation. Must contain a comparator
                and no filters.
     cache_name - Name of the cache.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_verify(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  aw_nexa_face_encounter_t* probe,
  const aw_char_t* encounter_id,
  aw_nexa_face_workflow_t* workflow,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_set_verify_result_callback
   <Description> Sets the verify_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     verify_result_callback - Callback used to notify when a verify operation
                              has completed.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_verify_result_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_verify_result_callback_t* verify_result_callback,
  void* private_data
);

/* <Function> aw_nexa_face_identify
   <Description> Peforms an identify operation, comparing the probe encounter
   against the entire enrolled cache. Progress is reported using
   the identify_progress_callback and the result is reported
   using the identify_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     probe - Encounter handle containing the probe.
     workflow - Workflow for the identify operation. Must contain a comparator
                and may contain zero or more filters.
     cache_name - Name of the cache.
   <Return Value>
     Status code of the function called.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_identify(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  aw_nexa_face_encounter_t* probe,
  aw_nexa_face_workflow_t* workflow,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_identify_partial
   <Description> Peforms a partial identify operation, comparing the probe
   encounter against the specified encounters in the enrolled
   cache. Progress is reported using the
   identify_progress_callback and the result is reported using
   the identify_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     job_id - ID that identifies the job.
     probe - Encounter handle containing the probe.
     workflow - Workflow for the identify operation. Must contain a comparator
                and may contain zero or more filters.
     encounter_id_list - List of encounter IDs to compare against.
     encounter_id_list_size - Size of List of encounter IDs to compare
                              against.
     cache_name - Name of the cache.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_identify_partial(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* job_id,
  aw_nexa_face_encounter_t* probe,
  aw_nexa_face_workflow_t* workflow,
  const aw_char_t** encounter_id_list,
  size_t encounter_id_list_size,
  const aw_char_t* cache_name
);

/* <Function> aw_nexa_face_set_identify_progress_callback
   <Description> Sets the identify_progress_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_progress_callback - Callback used to notify of an identify
                                  operation progress.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_identify_progress_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_progress_callback_t* identify_progress_callback,
  void* private_data
);

/* <Function> aw_nexa_face_set_identify_error_callback
   <Description> Sets the identify_error_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_error_callback - Callback used to notify of an error during an
                               identify operation. Called once for each error
                               encountered during the operation.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_identify_error_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_error_callback_t* identify_error_callback,
  void* private_data
);

/* <Function> aw_nexa_face_set_identify_result_callback
   <Description> Sets the identify_result_callback.
   <Parameters>
     aw_nexa_face - Library object pointer.
     identify_result_callback - Callback used to notify when an identify
                                operation has completed.
     private_data - Private data used to determine callback context.
   <Return Value>
     Error code if an error was encountered.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_identify_result_callback(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_identify_result_callback_t* identify_result_callback,
  void* private_data
);

/* Scoring Functions */

/* <Function> aw_nexa_face_get_score_as_percent
   <Description> Converts the score into a percentage score that ranges from
   0-100.
   <Parameters>
     score - Score.
     percent - Percent score that ranges from 0-100.
   <Return Value>
     Percent score that ranges from 0-100.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_get_score_as_percent(
  aw_float_t score,
  aw_float_t* percent
);

/* <Function> aw_nexa_face_get_percent_threshold_for_fpr
   <Description> Returns the percent threshold that is appropriate given a
   desired false match rate or false positive identification
   rate.
   <Parameters>
     false_positive_rate - Desired false match rate or false positive
                           identification rate.
     percent_threshold - Percent score that ranges from 0-100.
   <Return Value>
     Percent score that ranges from 0-100.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_get_percent_threshold_for_fpr(
  aw_float_t false_positive_rate,
  aw_float_t* percent_threshold
);

/* <Function> aw_nexa_face_fuse_scores_for_identification
   <Description> .
   <Parameters>
     scores - Input scores.
     scores_size - Size of Input scores.
     encounter_counts - Input scores.
     encounter_counts_size - Size of Input scores.
     fused_fpir_scores - Fused FPIR score.
   <Return Value>
     Fused FPIR score.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_fuse_scores_for_identification(
  aw_float_t* scores,
  size_t scores_size,
  aw_int32_t* encounter_counts,
  size_t encounter_counts_size,
  aw_float_t* fused_fpir_scores
);

/* <Function> aw_nexa_face_fuse_scores_for_identification_percent
   <Description> .
   <Parameters>
     scores - Input scores.
     scores_size - Size of Input scores.
     encounter_counts - Input scores.
     encounter_counts_size - Size of Input scores.
     fused_fpir_scores - Fused FPIR score.
   <Return Value>
     Fused FPIR score.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_fuse_scores_for_identification_percent(
  aw_float_t* scores,
  size_t scores_size,
  aw_int32_t* encounter_counts,
  size_t encounter_counts_size,
  aw_float_t* fused_fpir_scores
);

/* Logging Functions */

/* <Function> aw_nexa_face_set_log_file
   <Description> Set path to library's log file.
   <Parameters>
     aw_nexa_face - Library object pointer.
     path - Path with file name to the library log file.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_log_file(
  aw_nexa_face_t* aw_nexa_face,
  const aw_char_t* path
);

/* <Function> aw_nexa_face_set_log_level
   <Description> Set log level for library.
   <Parameters>
     aw_nexa_face - Library object pointer.
     level - Log level.
   <Return Value>
     None
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_set_log_level(
  aw_nexa_face_t* aw_nexa_face,
  aw_nexa_face_log_level_t level
);

/* Version Functions */

/* <Function> aw_nexa_face_get_version
   <Description> Returns integer value indicating the current version of the
   component.
   <Return Value>
     An integer indicating the library version number.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_get_version();

/* <Function> aw_nexa_face_get_version_string
   <Description> Returns a text string indicating the current version of the
   component.
   <Return Value>
     A string indicating the library version number.
    */
AW_NEXA_FACE_DECLARE(const aw_char_t*) aw_nexa_face_get_version_string();

/* Error Handling */

/* <Function> aw_nexa_face_get_error_details
   <Description> Returns the status code description of the last function
   called. The returned string must be passed to
   aw_nexa_face_free to free the returned memory.
   <Parameters>
     code - Code for the error encountered.
     error_details - Details of the error for the specified code.
   <Return Value>
     Details of the error for the specified code.
    */
AW_NEXA_FACE_DECLARE(aw_int32_t) aw_nexa_face_get_error_details(
  aw_int32_t code,
  const aw_char_t** error_details
);



#ifdef __cplusplus
}
#endif

#endif /* _AW_NEXA_FACE_H_ */

